<div class="cwikmeta">
{
"title":"P2P Protocol",
"related":[]
} </div>
<p>The Bitcoin P2P protocol is comprised of messages over TCP.  These messages are serialized using a custom format.  Unlike RPC protocols, messages do not necessarily have a reply and there is no way to unambiguously connect a sent message to a reply, although many communications are often request/response pairs.   High performance full node software may handle incoming messages in parallel, so it is not appropriate to assume a message reply order.  Messages that cannot be fulfilled are sometimes dropped with no reply, and sometimes replied to via a REJECT message.</p>
<p>These legacy design decisions can make the protocol difficult to implement on the client side, but are generally needed when a robust implementation communicates with untrusted/uncooperative partners.  A good strategy is to wait for any message that provides the required data, with a timeout, and then separately issue the request in a retry loop to multiple peers.  If a timeout occurs, return to higher level software which should re-assess whether the data is still needed, since in nodes in the network may have converged to a competing block or transaction, and therefore not be serving the data you are requesting (nodes only serve data on the most-difficult chain, even if they have some data pertaining to lower-difficulty splits).</p>
<h2 id="serialization-format">Serialization Format</h2>
<p>Bitcoin uses a custom serialization format that is generally little-endian.</p>
<h2 id="message-envelope">Message Envelope</h2>
<p>The following table describes the message header:</p>
<div class="table-wrapper"><table>
<thead>
<tr>
<th>network identifier</th>
<th>command</th>
<th>size</th>
<th>checksum</th>
<th>contents</th>
</tr>
</thead>
<tbody>
<tr>
<td>0: 4 bytes</td>
<td>4: 12 bytes</td>
<td>16: 4 bytes</td>
<td>20: 4 bytes</td>
<td>24: size bytes</td>
</tr>
<tr>
<td><em>BCH</em>:E3,E1,F3,E8<br /><em>BTC</em>:F9,BE,B4,D9<br /><em>tBCH</em>:F4,E5,F3,F4<br /><em>tBTC</em>:0B,11,09,07</td>
<td>ascii null extended</td>
<td>little endian uint32</td>
<td>little endian uint32</td>
<td>depends on command</td>
</tr>
</tbody>
</table>
</div><h3 id="network-identifier">Network Identifier</h3>
<p>The network identifier is used to separate blockchains and test networks.  This reduces unnecessary load on peers, allowing them to rapidly ban nodes rather then forcing the peer to do a blockchain analysis before banning.</p>
<p>Unfortunately, the BCH and BSV blockchains use the same network identifier.</p>
<h3 id="command">Command</h3>
<p>The command is the exact lowercase bytes in the titles of each subsection in the Message Types section below followed by zeros – e.g. the INV message’s command is literally the 12 bytes: ‘i’,‘n’,v’,0,0,0,0,0,0,0,0,0.  This is not a “C” string.  If a command was exactly 12 bytes, there would be no null terminator!</p>
<h3 id="size">Size</h3>
<p>Size is the size of the contents field in bytes, not the size of the entire message.</p>
<h3 id="checksum">Checksum</h3>
<p>This field is a message checksum.  The checksum is calculated by first computing the double SHA256 of the <em>contents</em> portion of the message.  The first 4 bytes of this hash is the checksum. See <a href="https://github.com/BitcoinUnlimited/BitcoinUnlimited/blob/bucash1.7.0.0/src/net.cpp#L3179">C++ generate</a>, <a href="https://github.com/BitcoinUnlimited/BitcoinUnlimited/blob/eb264e627e231f7219e60eef41b4e37cc52d6d9d/qa/rpc-tests/test_framework/mininode.py#L409">python verify</a>, <a href="https://github.com/BitcoinUnlimited/BitcoinUnlimited/blob/eb264e627e231f7219e60eef41b4e37cc52d6d9d/qa/rpc-tests/test_framework/mininode.py#L449">python generate</a>.</p>
<p>Since TCP has message integrity checksums, and a peer can cause another node to waste processing power validating bad checksums, it is not recommended that nodes verify this checksum.  That is, this field should be considered obsolete.</p>
<p>However, senders should calculate and fill this checksum field to be compatible with all software, unless the <a href="/protocol/p2p/xversion.md">XVERSION</a> message is used to tell peers that this checksum will not be verified (currently supported by <em>Bitcoin Unlimited</em>).  In this case the field <strong>SHOULD</strong> be set to 0 (but not enforced as 0 on the receiver’s side).  This may allow a future reuse of this field.</p>
<h3 id="contents">Contents</h3>
<p>The contents of messages are described in the next section.</p>
<h2 id="message-contents">Message Contents</h2>
<h3 id="announcements-unsolicited-messages-with-no-response">Announcements (unsolicited messages with no response)</h3>
<h4 id="filteradd"><a href="/protocol/p2p/filteradd">FILTERADD</a></h4>
<p><em>Add a single item into an existing filter</em></p>
<h4 id="filterclear"><a href="/protocol/p2p/filterclear">FILTERCLEAR</a></h4>
<p><em>Remove an existing filter</em></p>
<h4 id="filterload"><a href="/protocol/p2p/filterload">FILTERLOAD</a></h4>
<p><em>Inserts a transaction and merkle block filter into the peer</em></p>
<h4 id="inv"><a href="protocol/p2p/inv">INV</a></h4>
<p><em>Notifies peers about the existence of some information (generally a block or transaction)</em></p>
<h4 id="xupdate"><a href="/protocol/p2p/xupdate">XUPDATE</a></h4>
<p><em>Communicates a change in peer capabilities</em></p>
<h3 id="requests">Requests</h3>
<h4 id="getblocks"><a href="/protocol/p2p/getblocks">GETBLOCKS</a></h4>
<p><em>Requests block hash identifiers</em></p>
<h4 id="getdata"><a href="/protocol/p2p/getdata">GETDATA</a></h4>
<p><em>Requests information (generally previously announced via an INV) from a peer</em></p>
<h4 id="getheaders"><a href="/protocol/p2p/getheaders">GETHEADERS</a></h4>
<p><em>Requests block headers from a peer</em></p>
<h4 id="ping"><a href="/protocol/p2p/ping">PING</a></h4>
<p><em>Keep-alive</em></p>
<h4 id="version"><a href="/protocol/p2p/version">VERSION</a></h4>
<p><em>Describes peer capabilities</em></p>
<h4 id="xversion"><a href="/protocol/p2p/xversion">XVERSION</a></h4>
<p><em>Describes peer capabilities in an extensible manner</em><br />
<em>Currently supported by Bitcoin Unlimited only</em></p>
<h4 id="responses">Responses</h4>
<p>Note that some of these “response” messages can also be sent without solicitation (i.e. without a request).</p>
<h4 id="addr"><a href="/protocol/p2p/addr">ADDR</a></h4>
<p><em>Provides a peer with the addresses of other peers</em></p>
<h4 id="block-thinblock-xthinblock-grapheneblock-cmpctblock">BLOCK, THINBLOCK, XTHINBLOCK, GRAPHENEBLOCK, CMPCTBLOCK</h4>
<p><em>Provides a block</em></p>
<h4 id="headers"><a href="/protocol/p2p/headers">HEADERS</a></h4>
<p><em>Provides a set of block headers (unsolicited or GETHEADERS response)</em></p>
<h4 id="merkleblock"><a href="protocol/p2p/merkleblock">MERKLEBLOCK</a></h4>
<p><em>Provides a provable subset of a block’s transactions, as filtered by FILTERADD</em></p>
<h4 id="pong"><a href="/protocol/p2p/pong">PONG</a></h4>
<p><em>Reply to a ping message</em></p>
<h4 id="reject"><a href="/protocol/p2p/reject">REJECT</a></h4>
<p><em>General response by well-behaved clients if a message cannot be handled</em></p>
<h4 id="tx"><a href="/protocol/p2p/tx">TX</a></h4>
<p><em>Transaction object</em></p>
<h4 id="verack"><a href="/protocol/p2p/verack">VERACK</a></h4>
<p><em>Respond to a <a href="/protocol/p2p/version">version</a> message</em></p>
<h4 id="xverack"><a href="/protocol/p2p/xverack">XVERACK</a></h4>
<p><em>Respond to an <a href="/protocol/p2p/xversion">xversion</a> message</em></p>
